Project: 
  Name: virtual-tutoring-system

  Version: 1.0

  Overview: 
  - An agent designed to provide virtual tutoring services to students. 
  - It should relate to students the way a human tutor would.
  - It should be able to adapt to the student's learning style and pace.

  Scope: 
    - Assessing how close a student is to their learning goals. 
    - Generate a learning plan.
    - Coming up with practice materials. 
    - Grade assignments.
    - Provide feedback on student performance.
    - Keeping track of their progress in a persistent database.
    - Be able to adapt the schemas of the database tables or collections on-the-fly.
    - Understand the evolving strengths and weaknesses of the student.

  User Journeys:
    - The student should communicate with the system through a simple chat interface.
    - A practice session can take many forms, the agent should be able to seamlessly switch between teaching, testing or simply checking in with the student.
    - The student should recieve feedback and advice at the end of a session.
    - The student should be able to monitor their progress and performance in a dashboard.

Development:
  System Requirements:
    - High Throughput:
      description: The agent should be able to handle a large number of students at once.
      solution: 
        - Use an asynchronous web framework like FastAPI.
        - Use an asynchronous database driver like Motor.
    - Complex Behaviour:
      description: The agent takes on shifting roles, as it uses various tools in its arsenal to achieve the student's learning goal.
      solution: 
        - multi-agent interconnected agents, with specific roles, operating in tandem

  Best Practice:
    - codebase-maintainability:
      description: Codebase gets harder to maintain as it grows
      solution:
        - All code should be clean and follow PEP8 standards.
        - The cognitive complexity of functions should be kept low.
        - Good separation of responsibilities in the final product.
        - Prefer concise templating languages like HAML.
        - Prefer opinionated frameworks like NUXT3 about the project structure.
        - Use versatile component libraries that are both fit for purpose and easy to
        - Only use docstring comments, functions should reveal the local scope logic only.
        - Avoid code repetition. There should be a single-source of truth for any operation.
    - separation-of-responsibility:
      description: The codebase should be easy to test and mock at every level.
      solution:
        - Implement dependency injection patterns.

  Technology Stack:
    database: 
      - MongoDB
    backend:
      - FastAPI (main server)
      - liteLLM (Lightweight Language Model Wrapper)
      - Motor (Async MongoDB driver)
      - Pydantic (Data validation)
      - Pytest (Testing)
      - Swagger (API documentation)
    frontend:
      - NUXT3
      - openapi-generator-cli

  
