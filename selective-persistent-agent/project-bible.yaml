project-name: virtual-tutoring-system

project-version: 1.0.0

project-overview: 
  - An agent designed to provide virtual tutoring services to students. 
  - It should relate to students the way a human tutor would.
  - It should be able to adapt to the student's learning style and pace.

  - scope: 
    - Providing guidance and assistance in understanding the material.
    - Generate a learning plan.
    - Coming up with practice materials. 
    - Grade assignments.
    - Provide feedback on student performance.
    - Keeping track of their progress in a persistent database.
    - Be able to adapt the schemas of the database tables or collections on-the-fly.
    - Understand the evolving strengths and weaknesses of the student.

  - ux:
    - simple and intuitive
    - ability to interact with the agent through a web interface
    - The user should be able to monitor their progress and performance

product-requirements:

  - highThroughput:
    description: The agent should be able to handle a large number of students at once.
    solution: 
      - Use an asynchronous web framework like FastAPI.
      - Use an asynchronous database driver like Motor.

dev-requirements:

  - codebase-maintainability:
    description: Codebase gets harder to maintain as it grows
    solution:
      - All code should be clean and follow PEP8 standards.
      - The cognitive complexity of functions should be kept low.
      - Good separation of responsibilities in the final product.
      - Prefer concise templating languages like HAML.
      - Prefer opinionated frameworks like NUXT3 about the project structure.
      - Use versatile and intuitive component libraries.
      - Only use docstring comments, functions should reveal the local scope logic only.
      - Avoid code repetition. There should be a single-source of truth for any operation.

  - separation-of-responsibility:
    description: The codebase should be easy to test and mock at every level.
    solution:
      - Implement dependency injection patterns.

techStackSummary:
  database: 
    - MongoDB
  backend:
    - FastAPI (main server)
    - liteLLM (Lightweight Language Model Wrapper)
    - Motor (Async MongoDB driver)
    - Pydantic (Data validation)
    - Pytest (Testing)
    - Swagger (API documentation)
  frontend:
    - NUXT3