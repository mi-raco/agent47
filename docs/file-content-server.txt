---
File: docker-compose.yml
---
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:80"
    environment:
      - ENV=production
    volumes:
      - .:/app
    depends_on:
      - mongodb

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

volumes:
  mongo-data:---


---
File: dockerfile
---
# Use an official Python runtime as a parent image
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install Poetry
RUN pip install --no-cache-dir poetry

# Install dependencies using Poetry
RUN poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]---


---
File: pyproject.toml
---
[tool.poetry]
name = "virtual-tutoring-system"
version = "1.0.0"
description = "A virtual tutoring system."
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.85.0"
uvicorn = {extras = ["standard"], version = "^0.18.3"}
motor = "^3.1.1"
pydantic = "^1.10.2"
liteLLM = "^0.1.0"
pytest = "^7.1.3"
python-dotenv = "^0.21.0"
bcrypt = "^3.2.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"---


---
File: README.md
---
A multi-agent system for tutoring students in prefered subjects.---


---
File: app\config.py
---
from pydantic_settings import BaseSettings
from typing import Optional
from functools import lru_cache

class Settings(BaseSettings):
    # API Settings
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "Virtual Tutoring System"
    
    # MongoDB Settings
    MONGODB_URL: str = "mongodb://localhost:27017"
    MONGODB_DB_NAME: str = "virtual_tutoring"
    
    # Security Settings
    SECRET_KEY: str = "your-secret-key-here"  # Change in production
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # LLM Settings
    LITELLM_API_KEY: Optional[str] = None
    LITELLM_MODEL: str = "gpt-3.5-turbo"
    
    # CORS Settings
    BACKEND_CORS_ORIGINS: list[str] = ["*"]  # Change in production
    
    class Config:
        case_sensitive = True
        env_file = ".env"

@lru_cache()
def get_settings() -> Settings:
    return Settings()

settings = get_settings() ---


---
File: app\main.py
---
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from motor.motor_asyncio import AsyncIOMotorClient
from typing import Dict, Any

from app.config import settings
from app.api.v1 import students, tutors, sessions

app = FastAPI(
    title="Virtual Tutoring System",
    description="An AI-powered virtual tutoring system",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
)

# CORS middleware configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, replace with specific origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Database connection
@app.on_event("startup")
async def startup_db_client():
    app.mongodb_client = AsyncIOMotorClient(settings.MONGODB_URL)
    app.mongodb = app.mongodb_client[settings.MONGODB_DB_NAME]

@app.on_event("shutdown")
async def shutdown_db_client():
    app.mongodb_client.close()

# Global exception handler
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()}
    )

# Include routers
app.include_router(students.router, prefix="/api/v1/students", tags=["students"])
app.include_router(tutors.router, prefix="/api/v1/tutors", tags=["tutors"])
app.include_router(sessions.router, prefix="/api/v1/sessions", tags=["sessions"])

@app.get("/")
async def root() -> Dict[str, Any]:
    return {
        "message": "Welcome to Virtual Tutoring System API",
        "version": "1.0.0",
        "status": "operational"
    } ---


---
File: app\api\dependencies.py
---
from typing import Generator
from fastapi import Depends
from motor.motor_asyncio import AsyncIOMotorDatabase

from app.main import app

async def get_db() -> Generator[AsyncIOMotorDatabase, None, None]:
    """
    Get database connection.
    """
    try:
        yield app.mongodb
    finally:
        # Connection is managed by FastAPI lifecycle events
        pass ---


---
File: app\api\v1\students.py
---
from typing import List
from fastapi import APIRouter, Depends, HTTPException, Query
from motor.motor_asyncio import AsyncIOMotorDatabase

from app.models.student import Student
from app.schemas.student import StudentCreate, StudentUpdate, StudentInDB
from app.services.student_service import StudentService
from app.api.dependencies import get_db

router = APIRouter()

@router.post("/", response_model=StudentInDB)
async def create_student(
    *,
    db: AsyncIOMotorDatabase = Depends(get_db),
    student_in: StudentCreate,
) -> Student:
    """
    Create new student.
    """
    student_service = StudentService(db)
    student = await student_service.get_by_email(email=student_in.email)
    if student:
        raise HTTPException(
            status_code=400,
            detail="A student with this email already exists.",
        )
    return await student_service.create(obj_in=student_in)

@router.get("/", response_model=List[StudentInDB])
async def read_students(
    db: AsyncIOMotorDatabase = Depends(get_db),
    skip: int = 0,
    limit: int = 100,
) -> List[Student]:
    """
    Retrieve students.
    """
    student_service = StudentService(db)
    return await student_service.get_multi(skip=skip, limit=limit)

@router.get("/{student_id}", response_model=StudentInDB)
async def read_student(
    *,
    db: AsyncIOMotorDatabase = Depends(get_db),
    student_id: str,
) -> Student:
    """
    Get student by ID.
    """
    student_service = StudentService(db)
    student = await student_service.get(id=student_id)
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    return student

@router.put("/{student_id}", response_model=StudentInDB)
async def update_student(
    *,
    db: AsyncIOMotorDatabase = Depends(get_db),
    student_id: str,
    student_in: StudentUpdate,
) -> Student:
    """
    Update student.
    """
    student_service = StudentService(db)
    student = await student_service.get(id=student_id)
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    return await student_service.update(db_obj=student, obj_in=student_in)

@router.delete("/{student_id}")
async def delete_student(
    *,
    db: AsyncIOMotorDatabase = Depends(get_db),
    student_id: str,
) -> dict:
    """
    Delete student.
    """
    student_service = StudentService(db)
    student = await student_service.get(id=student_id)
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    await student_service.delete(id=student_id)
    return {"status": "success"}

@router.get("/subject/{subject}", response_model=List[StudentInDB])
async def read_students_by_subject(
    *,
    db: AsyncIOMotorDatabase = Depends(get_db),
    subject: str,
    skip: int = 0,
    limit: int = 100,
) -> List[Student]:
    """
    Get students by subject.
    """
    student_service = StudentService(db)
    return await student_service.get_students_by_subject(
        subject=subject,
        skip=skip,
        limit=limit
    ) ---


---
File: app\models\base.py
---
from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field
from bson import ObjectId

class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid objectid")
        return ObjectId(v)

    @classmethod
    def __modify_schema__(cls, field_schema):
        field_schema.update(type="string")

class BaseDBModel(BaseModel):
    id: Optional[PyObjectId] = Field(default_factory=PyObjectId, alias="_id")
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    is_active: bool = True

    class Config:
        json_encoders = {ObjectId: str}
        populate_by_name = True
        arbitrary_types_allowed = True ---


---
File: app\models\session.py
---
from typing import List, Optional
from pydantic import Field
from datetime import datetime

from app.models.base import BaseDBModel

class Session(BaseDBModel):
    student_id: str
    tutor_id: str
    subject: str
    start_time: datetime
    end_time: Optional[datetime] = None
    status: str = "scheduled"  # scheduled, in_progress, completed, cancelled
    session_type: str = "regular"  # regular, assessment, review
    topics_covered: List[str] = []
    materials_used: List[str] = []
    student_feedback: Optional[str] = None
    tutor_notes: Optional[str] = None
    performance_score: Optional[float] = None
    next_steps: List[str] = []
    
    class Config:
        schema_extra = {
            "example": {
                "student_id": "507f1f77bcf86cd799439011",
                "tutor_id": "507f1f77bcf86cd799439012",
                "subject": "Programming",
                "start_time": "2024-03-27T14:00:00",
                "end_time": "2024-03-27T15:00:00",
                "status": "completed",
                "session_type": "regular",
                "topics_covered": ["Python Functions", "Error Handling"],
                "materials_used": ["practice_problems.pdf", "code_examples.py"],
                "student_feedback": "Great session, learned a lot about functions",
                "tutor_notes": "Student shows good understanding of basic concepts",
                "performance_score": 85.5,
                "next_steps": ["Practice more complex functions", "Review decorators"]
            }
        } ---


---
File: app\models\student.py
---
from typing import List, Optional
from pydantic import EmailStr, Field
from datetime import datetime

from app.models.base import BaseDBModel

class Student(BaseDBModel):
    email: EmailStr
    name: str
    learning_goals: List[str] = []
    current_subjects: List[str] = []
    learning_style: Optional[str] = None
    preferred_schedule: Optional[List[dict]] = []
    last_session: Optional[datetime] = None
    total_sessions: int = 0
    performance_metrics: dict = Field(default_factory=dict)
    
    class Config:
        schema_extra = {
            "example": {
                "email": "student@example.com",
                "name": "John Doe",
                "learning_goals": ["Master Python", "Learn Data Structures"],
                "current_subjects": ["Programming", "Mathematics"],
                "learning_style": "visual",
                "preferred_schedule": [
                    {"day": "Monday", "time": "14:00"},
                    {"day": "Wednesday", "time": "15:00"}
                ],
                "last_session": "2024-03-27T10:00:00",
                "total_sessions": 5,
                "performance_metrics": {
                    "programming": {"score": 85, "progress": 0.7},
                    "mathematics": {"score": 90, "progress": 0.8}
                }
            }
        } ---


---
File: app\schemas\student.py
---
from typing import List, Optional
from pydantic import EmailStr, Field
from datetime import datetime

from app.models.base import BaseDBModel

class StudentBase(BaseModel):
    email: EmailStr
    name: str
    learning_goals: List[str] = []
    current_subjects: List[str] = []
    learning_style: Optional[str] = None
    preferred_schedule: Optional[List[dict]] = []

class StudentCreate(StudentBase):
    pass

class StudentUpdate(StudentBase):
    email: Optional[EmailStr] = None
    name: Optional[str] = None
    last_session: Optional[datetime] = None
    total_sessions: Optional[int] = None
    performance_metrics: Optional[dict] = None

class StudentInDB(StudentBase, BaseDBModel):
    last_session: Optional[datetime] = None
    total_sessions: int = 0
    performance_metrics: dict = Field(default_factory=dict)

    class Config:
        schema_extra = {
            "example": {
                "email": "student@example.com",
                "name": "John Doe",
                "learning_goals": ["Master Python", "Learn Data Structures"],
                "current_subjects": ["Programming", "Mathematics"],
                "learning_style": "visual",
                "preferred_schedule": [
                    {"day": "Monday", "time": "14:00"},
                    {"day": "Wednesday", "time": "15:00"}
                ],
                "last_session": "2024-03-27T10:00:00",
                "total_sessions": 5,
                "performance_metrics": {
                    "programming": {"score": 85, "progress": 0.7},
                    "mathematics": {"score": 90, "progress": 0.8}
                }
            }
        } ---


---
File: app\services\base.py
---
from typing import Generic, TypeVar, Type, Optional, List, Any
from fastapi.encoders import jsonable_encoder
from motor.motor_asyncio import AsyncIOMotorDatabase
from pydantic import BaseModel

from app.models.base import BaseDBModel

ModelType = TypeVar("ModelType", bound=BaseDBModel)
CreateSchemaType = TypeVar("CreateSchemaType", bound=BaseModel)
UpdateSchemaType = TypeVar("UpdateSchemaType", bound=BaseModel)

class BaseService(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):
    def __init__(self, model: Type[ModelType], db: AsyncIOMotorDatabase):
        self.model = model
        self.db = db
        self.collection = db[model.__collection__]

    async def get(self, id: str) -> Optional[ModelType]:
        if (doc := await self.collection.find_one({"_id": id})) is not None:
            return self.model(**doc)
        return None

    async def get_multi(
        self, *, skip: int = 0, limit: int = 100, query: dict = None
    ) -> List[ModelType]:
        cursor = self.collection.find(query or {})
        cursor = cursor.skip(skip).limit(limit)
        documents = await cursor.to_list(length=limit)
        return [self.model(**doc) for doc in documents]

    async def create(self, *, obj_in: CreateSchemaType) -> ModelType:
        obj_in_data = jsonable_encoder(obj_in)
        db_obj = self.model(**obj_in_data)
        result = await self.collection.insert_one(db_obj.dict(by_alias=True))
        return await self.get(str(result.inserted_id))

    async def update(
        self, *, db_obj: ModelType, obj_in: UpdateSchemaType | dict[str, Any]
    ) -> ModelType:
        obj_data = jsonable_encoder(db_obj)
        if isinstance(obj_in, dict):
            update_data = obj_in
        else:
            update_data = obj_in.dict(exclude_unset=True)
        for field in obj_data:
            if field in update_data:
                setattr(db_obj, field, update_data[field])
        await self.collection.update_one(
            {"_id": db_obj.id}, {"$set": db_obj.dict(exclude={"id"})}
        )
        return await self.get(str(db_obj.id))

    async def delete(self, *, id: str) -> bool:
        result = await self.collection.delete_one({"_id": id})
        return result.deleted_count > 0

    async def exists(self, *, id: str) -> bool:
        return await self.collection.count_documents({"_id": id}) > 0 ---


---
File: app\services\student_service.py
---
from typing import List, Optional
from motor.motor_asyncio import AsyncIOMotorDatabase
from pydantic import EmailStr

from app.models.student import Student
from app.services.base import BaseService
from app.schemas.student import StudentCreate, StudentUpdate

class StudentService(BaseService[Student, StudentCreate, StudentUpdate]):
    def __init__(self, db: AsyncIOMotorDatabase):
        super().__init__(Student, db)

    async def get_by_email(self, email: EmailStr) -> Optional[Student]:
        if (doc := await self.collection.find_one({"email": email})) is not None:
            return Student(**doc)
        return None

    async def update_learning_goals(
        self, *, student_id: str, goals: List[str]
    ) -> Optional[Student]:
        student = await self.get(student_id)
        if not student:
            return None
        student.learning_goals = goals
        return await self.update(db_obj=student, obj_in={"learning_goals": goals})

    async def update_performance_metrics(
        self, *, student_id: str, subject: str, score: float, progress: float
    ) -> Optional[Student]:
        student = await self.get(student_id)
        if not student:
            return None
        student.performance_metrics[subject] = {
            "score": score,
            "progress": progress
        }
        return await self.update(
            db_obj=student,
            obj_in={"performance_metrics": student.performance_metrics}
        )

    async def get_students_by_subject(
        self, *, subject: str, skip: int = 0, limit: int = 100
    ) -> List[Student]:
        return await self.get_multi(
            skip=skip,
            limit=limit,
            query={"current_subjects": subject}
        )

    async def update_session_count(self, *, student_id: str) -> Optional[Student]:
        student = await self.get(student_id)
        if not student:
            return None
        student.total_sessions += 1
        return await self.update(
            db_obj=student,
            obj_in={"total_sessions": student.total_sessions}
        ) ---


---
File: scripts\migrate.sh
---
#!/bin/bash

# Run database migrations
docker-compose run app alembic upgrade head---


---
File: scripts\start.sh
---
#!/bin/bash

# Build the Docker images
docker-compose build

# Run the Docker containers
docker-compose up---


---
File: scripts\test.sh
---
#!/bin/bash

# Run tests using pytest
docker-compose run app pytest---


